Index: Methode_rectangle.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import timeit\r\n\r\ndef f(x: float, p1: float, p2: float, p3: float, p4: float):\r\n    \"\"\"Fonction polynomiale du troisième degré.\"\"\"\r\n    return p1 + p2 * x + p3 * x ** 2 + p4 * x ** 3\r\n\r\ndef integral_analytique(a: float, b: float, p1: float, p2: float, p3: float, p4: float):\r\n    \"\"\"Intégrale analytique de f(x) entre a et b\"\"\"\r\n    term1 = p1 * (b - a)\r\n    term2 = p2 * (b ** 2 - a ** 2) / 2\r\n    term3 = p3 * (b ** 3 - a ** 3) / 3\r\n    term4 = p4 * (b ** 4 - a ** 4) / 4\r\n    return term1 + term2 + term3 + term4\r\n\r\ndef integral_rectangle(a: float, b: float, p1: float, p2: float, p3: float, p4: float, n: int = 10):\r\n    \"\"\"Intégration numérique par la méthode des rectangles sur n segments.\"\"\"\r\n    h = (b - a) / n  # largeur d'un segment\r\n    total = 0\r\n    x = a\r\n    for _ in range(n):\r\n        total += f(x, p1, p2, p3, p4) * h\r\n        x += h\r\n    return total\r\n\r\ndef erreur_integration(a: float, b: float, p1: float, p2: float, p3: float, p4: float, n: int = 10):\r\n    \"\"\"Erreur absolue entre l'intégrale analytique et numérique.\"\"\"\r\n    exact = integral_analytique(a, b, p1, p2, p3, p4)\r\n    approx = integral_rectangle(a, b, p1, p2, p3, p4, n)\r\n    return abs(exact - approx)\r\n\r\ndef tester_convergence(a: float, b: float, p1: float, p2: float, p3: float, p4: float):\r\n    \"\"\"Affiche l'erreur pour des valeurs croissantes de n.\"\"\"\r\n    print(\"\\nTest de convergence :\")\r\n    for n in [10, 100, 1000, 10000, 100000]:\r\n        err = erreur_integration(a, b, p1, p2, p3, p4, n)\r\n        print(f\"n={n:<7} erreur={err:.10f}\")\r\n\r\ndef mesurer_temps_execution(a, b, p1, p2, p3, p4, n):\r\n    \"\"\"Mesure le temps d'exécution de l'intégration numérique.\"\"\"\r\n    temps = timeit.timeit(lambda: integral_rectangle(a, b, p1, p2, p3, p4, n), number=1)\r\n    print(f\"\\nTemps d'exécution pour n={n} : {temps:.6f} secondes\")\r\n\r\n\r\n# Valeur fixe pour le coefficient du polynome et limites d'intégration\r\np1, p2, p3, p4 = 26, 36, 12, 7  # coefficients du polynôme\r\na, b = -50, 50  # bornes de l'intégrale\r\nn = 10  # nombre de segments pour la méthode des rectangles\r\n\r\nexacte = integral_analytique(a, b, p1, p2, p3, p4)\r\napprox = integral_rectangle(a, b, p1, p2, p3, p4, n)\r\nerr = abs(exacte - approx)\r\n\r\nprint(f\"Intégrale analytique   : {exacte}\")\r\nprint(f\"Intégrale numérique    : {approx}\")\r\nprint(f\"Erreur absolue (n={n}): {err}\")\r\n\r\ntester_convergence(a, b, p1, p2, p3, p4)\r\nmesurer_temps_execution(a, b, p1, p2, p3, p4, n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methode_rectangle.py b/Methode_rectangle.py
--- a/Methode_rectangle.py	(revision 98681126c08800cd4588714a6618a0079764af6d)
+++ b/Methode_rectangle.py	(date 1749163520061)
@@ -10,7 +10,7 @@
     term2 = p2 * (b ** 2 - a ** 2) / 2
     term3 = p3 * (b ** 3 - a ** 3) / 3
     term4 = p4 * (b ** 4 - a ** 4) / 4
-    return term1 + term2 + term3 + term4
+    return term1 + term2 + term3 += term4
 
 def integral_rectangle(a: float, b: float, p1: float, p2: float, p3: float, p4: float, n: int = 10):
     """Intégration numérique par la méthode des rectangles sur n segments."""
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Byte-compiled / optimized / DLL files\r\n__pycache__/\r\n*.py[cod]\r\n*$py.class\r\n\r\n# C extensions\r\n*.so\r\n\r\n# Distribution / packaging\r\n.Python\r\nbuild/\r\ndevelop-eggs/\r\ndist/\r\ndownloads/\r\neggs/\r\n.eggs/\r\nlib/\r\nlib64/\r\nparts/\r\nsdist/\r\nvar/\r\nwheels/\r\nshare/python-wheels/\r\n*.egg-info/\r\n.installed.cfg\r\n*.egg\r\nMANIFEST\r\n\r\n# PyInstaller\r\n#  Usually these files are written by a python script from a template\r\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\r\n*.manifest\r\n*.spec\r\n\r\n# Installer logs\r\npip-log.txt\r\npip-delete-this-directory.txt\r\n\r\n# Unit test / coverage reports\r\nhtmlcov/\r\n.tox/\r\n.nox/\r\n.coverage\r\n.coverage.*\r\n.cache\r\nnosetests.xml\r\ncoverage.xml\r\n*.cover\r\n*.py,cover\r\n.hypothesis/\r\n.pytest_cache/\r\ncover/\r\n\r\n# Translations\r\n*.mo\r\n*.pot\r\n\r\n# Django stuff:\r\n*.log\r\nlocal_settings.py\r\ndb.sqlite3\r\ndb.sqlite3-journal\r\n\r\n# Flask stuff:\r\ninstance/\r\n.webassets-cache\r\n\r\n# Scrapy stuff:\r\n.scrapy\r\n\r\n# Sphinx documentation\r\ndocs/_build/\r\n\r\n# PyBuilder\r\n.pybuilder/\r\ntarget/\r\n\r\n# Jupyter Notebook\r\n.ipynb_checkpoints\r\n\r\n# IPython\r\nprofile_default/\r\nipython_config.py\r\n\r\n# pyenv\r\n#   For a library or package, you might want to ignore these files since the code is\r\n#   intended to run in multiple environments; otherwise, check them in:\r\n# .python-version\r\n\r\n# pipenv\r\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\r\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\r\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\r\n#   install all needed dependencies.\r\n#Pipfile.lock\r\n\r\n# UV\r\n#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.\r\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\r\n#   commonly ignored for libraries.\r\n#uv.lock\r\n\r\n# poetry\r\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\r\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\r\n#   commonly ignored for libraries.\r\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\r\n#poetry.lock\r\n\r\n# pdm\r\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\r\n#pdm.lock\r\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\r\n#   in version control.\r\n#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control\r\n.pdm.toml\r\n.pdm-python\r\n.pdm-build/\r\n\r\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\r\n__pypackages__/\r\n\r\n# Celery stuff\r\ncelerybeat-schedule\r\ncelerybeat.pid\r\n\r\n# SageMath parsed files\r\n*.sage.py\r\n\r\n# Environments\r\n.env\r\n.venv\r\nenv/\r\nvenv/\r\nENV/\r\nenv.bak/\r\nvenv.bak/\r\n\r\n# Spyder project settings\r\n.spyderproject\r\n.spyproject\r\n\r\n# Rope project settings\r\n.ropeproject\r\n\r\n# mkdocs documentation\r\n/site\r\n\r\n# mypy\r\n.mypy_cache/\r\n.dmypy.json\r\ndmypy.json\r\n\r\n# Pyre type checker\r\n.pyre/\r\n\r\n# pytype static type analyzer\r\n.pytype/\r\n\r\n# Cython debug symbols\r\ncython_debug/\r\n\r\n# PyCharm\r\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\r\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\r\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\r\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\r\n#.idea/\r\n\r\n# Abstra\r\n# Abstra is an AI-powered process automation framework.\r\n# Ignore directories containing user credentials, local state, and settings.\r\n# Learn more at https://abstra.io/docs\r\n.abstra/\r\n\r\n# Visual Studio Code\r\n#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore \r\n#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore\r\n#  and can be added to the global gitignore or merged into this file. However, if you prefer, \r\n#  you could uncomment the following to ignore the enitre vscode folder\r\n# .vscode/\r\n\r\n# Ruff stuff:\r\n.ruff_cache/\r\n\r\n# PyPI configuration file\r\n.pypirc\r\n\r\n# Cursor\r\n#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to\r\n#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data\r\n#  refer to https://docs.cursor.com/context/ignore-files\r\n.cursorignore\r\n.cursorindexingignore
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision 98681126c08800cd4588714a6618a0079764af6d)
+++ b/.gitignore	(date 1749163540965)
@@ -3,6 +3,8 @@
 *.py[cod]
 *$py.class
 
+./idea
+
 # C extensions
 *.so
 
